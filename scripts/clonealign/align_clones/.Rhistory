xlab(paste0('UMAP', "-1")) +
ylab(paste0('UMAP', "-2")) +
theme_bw() +
theme_Publication() +
theme_nature() +
scale_fill_gradientn(colours = gradient_colours,
limits = expr_limits) +
scale_colour_gradientn(colours = gradient_colours,
limits = expr_limits) +
ggtitle(mgene)
return(p)
})
names(res) <- proliferation_markers
return(res)
})
names(proliferation_plots) <- patients
categorical_palettes <- cat_palettes()
heatmap_heat_colours <- heat_colour_gradient()
gradient_colours <- scrna_expression_gradient()
pval_colours <- pval_colour_gradient()
cat_palettes <- function ()
{
dataset_colours <- c(TFRIPAIR1_FL = "#283F3B", TFRIPAIR1_DLBCL = "#AFC97E")
# FL1018T2 = "#7F7EFF", FL1018L = NA, FL2001T1 = "#283F3B",
# FL2001T2 = "#AFC97E", FL2001D = "#92140C")
timepoint_colours <- c(G = "#114B5F", non = "#92140C")
celltype_colours <- c(`B cells` = "#954E93", `B cells (malignant)` = "#99A3C3",
`CD4 (activated)` = "#4A3D39", `Cytotoxic T cells` = "#C19D50",
`Cytotoxic T cells (activated)` = "#8C43CE", `Naive/resting CD4` = "#8ED250",
`CD4 T cells` = "#8ED250", Tfh = "#C55049", Unassigned = "#CCCCCC")
hgsc_celltype_colours <- c(`Epithelial cells` = "#954E93",
`Ovarian stromal cells` = "#99A3C3", `Ovarian myofibroblast` = "#4A3D39",
`Vascular smooth muscle cells` = "#C19D50", `Endothelial cells` = "#8C43CE",
`Monocyte/Macrophage` = "#8ED250", `T cells` = "#2274A5",
`B cells` = "#C55049", Unassigned = "#CCCCCC")
hgsc_dataset_colours <- c(`Left Ovary` = "#81B29A", `Right Ovary` = "#3D405B")
hla_gene_colours <- c(B2M = "#07A0C3", `HLA-A` = "#AAFAC8",
`HLA-B` = "#FFAD05", `HLA-C` = "#DB504A", CD74 = "#6B2737",
`HLA-DRA` = "#646881", `HLA-DRB1` = "#B592A0")
clustering_methods <- c(cellassign = "#4C2E67", cellassign_shrinkage = "#87D4A9",
densitycut = "#4C3833", dynamicTreeCut = "#CEBB4F", gaussian = "#9283CB",
kmeans = "#7CD450", phenograph = "#C55A32", SC3 = "#58723B",
scmap = "#CCA89D", seurat_0.4 = "#723CCF", seurat_0.8 = "#CD4FBE",
seurat_1.2 = "#70A2B7", Zheng_cor = "#BE4A6C")
koh_celltype_colours <- c(hESC = "#DFBE99", APS = "#A8C686",
MPS = "#EA2B1F", DLL1pPXM = "#43281C", ESMT = "#904E55",
Sclrtm = "#FF7700", D5CntrlDrmmtm = "#2364AA", D2LtM = "#571F4E")
light_chain_class_colours <- c(IGKC = "#61210F", IGLC = "#FFBF46",
Unassigned = "#CCCCCC")
significance_colours <- c(`P <= 0.05` = "#DD1C1A", `P > 0.05` = "#CCCCCC")
num_marker_colours <- c(`2` = "#440154", `4` = "#31688E",
`6` = "#35B779", `8` = "#FDE725")
bcell_population_colours <- c(`nonmalignant, FL` = "#83BCA9",
`nonmalignant, DLBCL` = "#17255A", `malignant, FL` = "#E84855",
`malignant, DLBCL` = "#5A2328")
hgsc_epithelial_cluster_colours <- c(`0` = "#443742", `1` = "#EDD9A3",
`2` = "#963D5A", `3` = "#81B29A", `4` = "#C73E1D")
palettes <- list(dataset = dataset_colours, celltype = celltype_colours,
hla_genes = hla_gene_colours, clustering_methods = clustering_methods,
timepoint = timepoint_colours, koh_celltype = koh_celltype_colours,
light_chain_class = light_chain_class_colours, significance = significance_colours,
num_markers = num_marker_colours, bcell_population = bcell_population_colours,
hgsc_dataset = hgsc_dataset_colours, hgsc_celltype = hgsc_celltype_colours,
hgsc_epithelial_cluster = hgsc_epithelial_cluster_colours)
return(palettes)
}
theme_Publication <- function (base_size = 14, base_family = "helvetica")
{
theme(plot.title = element_text(face = "bold", size = rel(1.2),
hjust = 0.5), text = element_text(), panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA), panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold", size = rel(1)),
axis.title.y = element_text(angle = 90, vjust = 2), axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(), axis.line = element_line(colour = "black"),
axis.ticks = element_line(), panel.grid.major = element_line(colour = "#f0f0f0"),
panel.grid.minor = element_blank(), legend.key = element_rect(colour = NA),
legend.position = "bottom", legend.direction = "horizontal",
legend.key.size = unit(0.2, "cm"), legend.margin = unit(0.5,
"lines"), legend.title = element_text(face = "italic"),
legend.box.just = "left", plot.margin = unit(c(10, 5,
5, 5), "mm"), strip.background = element_rect(colour = "#f0f0f0",
fill = "#f0f0f0"), strip.text = element_text(face = "bold"))
}
theme_nature <- function (fontsize = 8)
{
theme(legend.text = element_text(size = fontsize, face = "plain"),
axis.title = element_text(size = fontsize, face = "bold"),
legend.title = element_text(size = fontsize, face = "bold"),
plot.title = element_text(size = fontsize, face = "bold"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.text = element_text(size = fontsize, face = "plain"),
axis.text = element_text(size = fontsize, face = "plain"))
}
ggsimplelegend <- function (vars, colour_mapping, legend_title, legend_rows = 1,
labels = vars, fontsize = 7, type = "discrete", ...)
{
if (type == "discrete") {
legend <- ggplot2::ggplot(data.frame(x = rep(1, length(vars)),
col = factor(vars, levels = unique(vars))), aes(x = x,
fill = col)) + geom_histogram(binwidth = 1) + scale_fill_manual(values = colour_mapping,
labels = labels) + theme_Publication() + theme_nature(fontsize = fontsize) +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.key.size = unit(0.5, "line"), legend.background = element_rect(fill = "transparent",
colour = NA), legend.justification = "center") +
guides(fill = guide_legend(title = legend_title,
nrow = legend_rows, title.position = "top", title.hjust = 0.5))
}
else if (type == "continuous") {
legend <- ggplot2::ggplot(data.frame(x = rep(1, length(vars)),
col = vars), aes(x = x, fill = col)) + geom_histogram(binwidth = 1) +
scale_fill_gradientn(colours = colour_mapping, limits = vars) +
theme_Publication() + theme_nature(fontsize = fontsize) +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.background = element_rect(fill = "transparent",
colour = NA), legend.justification = "center") +
guides(fill = guide_colourbar(title = legend_title,
title.position = "top", title.hjust = 0.5, ...))
}
return(legend)
}
extract_legend <- function (a.gplot)
{
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
df_as_map <- function (df, vec, from, to)
{
if (length(from) > 1 || length(to) > 1) {
stop("Please specify ONE index for from and to, each.")
}
df <- df[df[, from] != "", ]
map <- data.frame(from = df[, from], to = df[, to], stringsAsFactors = FALSE)
map <- unique(map)
map <- map[complete.cases(map), ]
map <- data.table::data.table(map)
data.table::setkey(map, "from")
return(map[as.character(vec), ]$to)
}
heat_colour_gradient <- function ()
{
heat_colours <- colorRampPalette(c("#3794BF", "#FFFFFF",
"#DF8640"))(100)
return(heat_colours)
}
scrna_expression_gradient <- function ()
{
heat_colours <- viridisLite::viridis(256, 1, 0, 1, 1, "D")
return(heat_colours)
}
pval_colour_gradient <- function ()
{
pval_colours <- colorRampPalette(c("#3794BF", "#FF3C38"))(100)
return(pval_colours)
}
categorical_palettes <- cat_palettes()
heatmap_heat_colours <- heat_colour_gradient()
gradient_colours <- scrna_expression_gradient()
pval_colours <- pval_colour_gradient()
proliferation_plots <- lapply(patients, function(pat) {
res <- lapply(proliferation_markers, function(mgene) {
p <- plotReducedDim(sce_ca_tmp %>% scater::filter(malignant_status_manual == "malignant",
patient == pat),
use_dimred = 'UMAP',
colour_by = get_ensembl_id(mgene, sce_ca_tmp),
point_alpha = 0.5,
point_size = 0.75)
p$layers[[1]]$aes_params$colour <- NULL
p$layers[[1]]$aes_params$shape <- 16
p$layers[[1]]$mapping$colour <- p$layers[[1]]$mapping$fill
p <- p +
guides(fill = FALSE,
colour = FALSE) +
xlab(paste0('UMAP', "-1")) +
ylab(paste0('UMAP', "-2")) +
theme_bw() +
theme_Publication() +
theme_nature() +
scale_fill_gradientn(colours = gradient_colours,
limits = expr_limits) +
scale_colour_gradientn(colours = gradient_colours,
limits = expr_limits) +
ggtitle(mgene)
return(p)
})
names(res) <- proliferation_markers
return(res)
})
names(proliferation_plots) <- patients
proliferation_plots
proliferation_plots <- lapply(patients, function(pat) {
res <- lapply(proliferation_markers, function(mgene) {
p <- plotReducedDim(sce_ca_tmp %>% scater::filter(malignant_status_manual == "malignant",
patient == pat),
use_dimred = 'TSNE',
colour_by = get_ensembl_id(mgene, sce_ca_tmp),
point_alpha = 0.5,
point_size = 0.75)
p$layers[[1]]$aes_params$colour <- NULL
p$layers[[1]]$aes_params$shape <- 16
p$layers[[1]]$mapping$colour <- p$layers[[1]]$mapping$fill
p <- p +
guides(fill = FALSE,
colour = FALSE) +
xlab(paste0('TSNE', "-1")) +
ylab(paste0('TSNE', "-2")) +
theme_bw() +
theme_Publication() +
theme_nature() +
scale_fill_gradientn(colours = gradient_colours,
limits = expr_limits) +
scale_colour_gradientn(colours = gradient_colours,
limits = expr_limits) +
ggtitle(mgene)
return(p)
})
names(res) <- proliferation_markers
return(res)
})
names(proliferation_plots) <- patients
proliferation_plots
bcell_timepoint_plots <- lapply(patients, function(pat) {
bcell_timepoint <- plotReducedDim(sce_ca %>% scater::filter(malignant_status_manual == "malignant",
patient == pat),
use_dimred = 'TSNE',
colour_by = "clonealign_cluster",
point_alpha = 0.2,
point_size = 0.75)
bcell_timepoint$layers[[1]]$aes_params$colour <- NULL
bcell_timepoint$layers[[1]]$aes_params$shape <- 16
bcell_timepoint$layers[[1]]$mapping$colour <- bcell_timepoint$layers[[1]]$mapping$fill
bcell_timepoint <- bcell_timepoint +
guides(colour = FALSE,
fill = FALSE,
shape = FALSE) +
xlab(paste0('TSNE', "-1")) +
ylab(paste0('TSNE', "-2")) +
theme_bw() +
theme_Publication() +
theme_nature() +
scale_colour_manual(values = categorical_palettes$timepoint)
return(bcell_timepoint)
})
names(bcell_timepoint_plots) <- patients
bcell_timepoint_plots
bcell_timepoint_plots <- lapply(patients, function(pat) {
bcell_timepoint <- plotReducedDim(sce_ca %>% scater::filter(malignant_status_manual == "malignant",
patient == pat),
use_dimred = 'TSNE',
colour_by = "clone_specific",
point_alpha = 0.2,
point_size = 0.75)
bcell_timepoint$layers[[1]]$aes_params$colour <- NULL
bcell_timepoint$layers[[1]]$aes_params$shape <- 16
bcell_timepoint$layers[[1]]$mapping$colour <- bcell_timepoint$layers[[1]]$mapping$fill
bcell_timepoint <- bcell_timepoint +
guides(colour = FALSE,
fill = FALSE,
shape = FALSE) +
xlab(paste0('TSNE', "-1")) +
ylab(paste0('TSNE', "-2")) +
theme_bw() +
theme_Publication() +
theme_nature() +
scale_colour_manual(values = categorical_palettes$timepoint)
return(bcell_timepoint)
})
names(bcell_timepoint_plots) <- patients
bcell_timepoint_plots
cycling_stats <- with(colData(sce_ca), table(patient, clone_specific, celltype_full, Cell_Cycle)) %>%
as.data.frame %>%
dplyr::rename(count=Freq) %>%
dplyr::group_by(patient, clone_specific, celltype_full) %>%
dplyr::mutate(total_count=sum(count)) %>%
dplyr::ungroup()
cycling_summary <- cycling_stats %>%
dplyr::filter(Cell_Cycle %in% c("S", "G2M")) %>%
dplyr::group_by(patient, clone_specific, celltype_full, total_count) %>%
dplyr::summarise(cycling_count=sum(count)) %>%
dplyr::ungroup() %>%
dplyr::mutate(cycling_prop=cycling_count/total_count) %>%
dplyr::group_by(clone_specific) %>%
dplyr::mutate(total_prop=total_count/sum(total_count)) %>%
dplyr::ungroup()
min_cell_count <- 15
prop_limits <- c(0.01, max(cycling_summary$total_prop))
cycling_plot_results <- lapply(patients, function(pat) {
cycling_summary_patient <- cycling_summary %>%
dplyr::filter(patient == pat)
removed_cell_types <- (cycling_summary_patient %>%
dplyr::filter(total_count <= min_cell_count))$celltype_full %>%
unique %>%
union(c("other"))
included_cell_types <- cycling_summary_patient$celltype_full %>%
unique %>%
setdiff(removed_cell_types)
timepoint_cell_counts <- cycling_summary_patient %>%
dplyr::group_by(patient, clone_specific) %>%
dplyr::summarise(all_cell_count=sum(total_count)) %>%
dplyr::ungroup()
cycling_summary_patient <- cycling_summary_patient %>%
dplyr::left_join(timepoint_cell_counts) %>%
dplyr::mutate(timepoint_label=paste0(clone_specific, "\nn=", all_cell_count))
cycling_plot <- ggplot(cycling_summary_patient %>%
dplyr::filter(!celltype_full %in% removed_cell_types),
aes(x=timepoint_label, y=cycling_prop, colour=celltype_full)) +
geom_point(aes(size=total_prop)) +
geom_line(aes(group=celltype_full)) +
theme_bw() +
theme_Publication() +
theme_nature() +
xlab("Timepoint") +
ylab("Proportion of cells in S/G2/M") +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.5), limits = prop_limits) +
scale_colour_manual(values = categorical_palettes$celltype) +
guides(colour= FALSE,
size = FALSE)
return(list(plot=cycling_plot, cell_types=included_cell_types))
})
names(cycling_plot_results) <- patients
cycling_plot_results
cycling_stats <- with(colData(sce_ca), table(patient, clone_specific, celltype_full, Cell_Cycle)) %>%
as.data.frame %>%
dplyr::rename(count=Freq) %>%
dplyr::group_by(patient, clone_specific, celltype_full) %>%
dplyr::mutate(total_count=sum(count)) %>%
dplyr::ungroup()
cycling_summary <- cycling_stats %>%
dplyr::filter(Cell_Cycle %in% c("S", "G2M")) %>%
dplyr::group_by(patient, clone_specific, celltype_full, total_count) %>%
dplyr::summarise(cycling_count=sum(count)) %>%
dplyr::ungroup() %>%
dplyr::mutate(cycling_prop=cycling_count/total_count) %>%
dplyr::group_by(clone_specific) %>%
dplyr::mutate(total_prop=total_count/sum(total_count)) %>%
dplyr::ungroup()
min_cell_count <- 15
prop_limits <- c(0.01, max(cycling_summary$total_prop))
cycling_plot_results <- lapply(patients, function(pat) {
cycling_summary_patient <- cycling_summary %>%
dplyr::filter(patient == pat)
removed_cell_types <- (cycling_summary_patient %>%
dplyr::filter(total_count <= min_cell_count))$celltype_full %>%
unique %>%
union(c("other"))
included_cell_types <- cycling_summary_patient$celltype_full %>%
unique %>%
setdiff(removed_cell_types)
timepoint_cell_counts <- cycling_summary_patient %>%
dplyr::group_by(patient, clone_specific) %>%
dplyr::summarise(all_cell_count=sum(total_count)) %>%
dplyr::ungroup()
cycling_summary_patient <- cycling_summary_patient %>%
dplyr::left_join(timepoint_cell_counts) %>%
dplyr::mutate(timepoint_label=paste0(clone_specific, "\nn=", all_cell_count))
cycling_plot <- ggplot(cycling_summary_patient %>%
dplyr::filter(!celltype_full %in% removed_cell_types),
aes(x=timepoint_label, y=cycling_prop, colour=celltype_full)) +
geom_point(aes(size=total_prop)) +
geom_line(aes(group=celltype_full)) +
theme_bw() +
theme_Publication() +
theme_nature() +
xlab("Clone") +
ylab("Proportion of cells in S/G2/M") +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.5), limits = prop_limits) +
scale_colour_manual(values = categorical_palettes$celltype) +
guides(colour= FALSE,
size = FALSE)
return(list(plot=cycling_plot, cell_types=included_cell_types))
})
names(cycling_plot_results) <- patients
cycling_plot_results
timepoint_legend <- ggsimplelegend(vars = names(categorical_palettes$timepoint),
colour_mapping = categorical_palettes$timepoint,
legend_title = "Clone",
legend_rows = 1)
timepoint_legend <- extract_legend(timepoint_legend)
proliferation_expression_legend <- ggsimplelegend(expr_limits,
colour_mapping = gradient_colours,
legend_title = "Log normalized counts",
type = "continuous") +
theme(legend.key.width = unit(2, "lines"))
proliferation_expression_legend <- extract_legend(proliferation_expression_legend)
## Cell type and size legends for cell cycle plots
cycling_cell_types <- do.call(union, unname(lapply(cycling_plot_results, function(x) x$cell_types)))
cycling_celltype_legend <- ggsimplelegend(vars = names(categorical_palettes$celltype[cycling_cell_types]),
colour_mapping = categorical_palettes$celltype[cycling_cell_types],
legend_title = "Celltype",
legend_rows = 2)
cycling_celltype_legend <- extract_legend(cycling_celltype_legend)
message("Creating cycling size legend ...")
cycling_size_legend <- ggplot(cycling_summary, aes(x=timepoint, y=cycling_prop)) +
geom_point(aes(size=total_prop)) +
theme_bw() +
theme_Publication() +
theme_nature() +
guides(size = guide_legend(title = "Total proportion",
title.position = "top",
title.hjust = 0.5)) +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.3), limits = prop_limits) +
theme(legend.title = element_text(size = 7))
cycling_size_legend <- extract_legend(cycling_size_legend)
message("Completed cycling size plot.")
timepoint_legend <- ggsimplelegend(vars = names(categorical_palettes$timepoint),
colour_mapping = categorical_palettes$timepoint,
legend_title = "Clone",
legend_rows = 1)
timepoint_legend <- extract_legend(timepoint_legend)
proliferation_expression_legend <- ggsimplelegend(expr_limits,
colour_mapping = gradient_colours,
legend_title = "Log normalized counts",
type = "continuous") +
theme(legend.key.width = unit(2, "lines"))
proliferation_expression_legend <- extract_legend(proliferation_expression_legend)
cycling_cell_types <- do.call(union, unname(lapply(cycling_plot_results, function(x) x$cell_types)))
unname(lapply(cycling_plot_results, function(x) x$cell_types))
union
cycling_cell_types <- unname(lapply(cycling_plot_results, function(x) x$cell_types))
cycling_celltype_legend <- ggsimplelegend(vars = names(categorical_palettes$celltype[cycling_cell_types]),
colour_mapping = categorical_palettes$celltype[cycling_cell_types],
legend_title = "Celltype",
legend_rows = 2)
cycling_celltype_legend <- extract_legend(cycling_celltype_legend)
message("Creating cycling size legend ...")
categorical_palettes$celltype
categorical_palettes$celltype['B cells (malignant)']
cycling_celltype_legend <- ggsimplelegend(vars = names(categorical_palettes$celltype[cycling_cell_types]),
colour_mapping = categorical_palettes$celltype[cycling_cell_types],
legend_title = "Celltype",
legend_rows = 1)
cycling_cell_types <- unname(lapply(cycling_plot_results, function(x) x$cell_types))
cycling_cell_types
cycling_cell_types <- unlist(unname(lapply(cycling_plot_results, function(x) x$cell_types)))
cycling_celltype_legend <- ggsimplelegend(vars = names(categorical_palettes$celltype[cycling_cell_types]),
colour_mapping = categorical_palettes$celltype[cycling_cell_types],
legend_title = "Celltype",
legend_rows = 1)
cycling_celltype_legend <- extract_legend(cycling_celltype_legend)
message("Creating cycling size legend ...")
cycling_size_legend <- ggplot(cycling_summary, aes(x=timepoint, y=cycling_prop)) +
geom_point(aes(size=total_prop)) +
theme_bw() +
theme_Publication() +
theme_nature() +
guides(size = guide_legend(title = "Total proportion",
title.position = "top",
title.hjust = 0.5)) +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.3), limits = prop_limits) +
theme(legend.title = element_text(size = 7))
cycling_size_legend <- extract_legend(cycling_size_legend)
message("Completed cycling size plot.")
cycling_size_legend <- ggplot(cycling_summary, aes(x=timepoint, y=cycling_prop)) +
geom_point(aes(size=total_prop)) +
theme_bw() +
theme_Publication() +
theme_nature() +
guides(size = guide_legend(title = "Total proportion",
title.position = "top",
title.hjust = 0.5)) +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.3), limits = prop_limits) +
theme(legend.title = element_text(size = 7))
cycling_size_legend <- extract_legend(cycling_size_legend)
cycling_size_legend
cycling_summary
cycling_size_legend <- ggplot(cycling_summary, aes(x=clone_specific, y=cycling_prop)) +
geom_point(aes(size=total_prop)) +
theme_bw() +
theme_Publication() +
theme_nature() +
guides(size = guide_legend(title = "Total proportion",
title.position = "top",
title.hjust = 0.5)) +
scale_size_continuous(trans = "log", breaks = c(0.01, 0.1, 0.3), limits = prop_limits) +
theme(legend.title = element_text(size = 7))
cycling_size_legend <- extract_legend(cycling_size_legend)
message("Completed cycling size plot.")
top_row <- cowplot::plot_grid(bcell_timepoint_plots$TFRIPAIR1,
proliferation_plots$TFRIPAIR1$MKI67,
proliferation_plots$TFRIPAIR1$TOP2A,
cycling_plot_results$TFRIPAIR1$plot,
labels = c('c', '', '', 'd'),
ncol = 4,
rel_widths = rep(0.25, 4))
top_row
top_second_legend <- cowplot::plot_grid(timepoint_legend,
proliferation_expression_legend,
cycling_celltype_legend,
cycling_size_legend,
ncol = 4,
rel_widths = c(0.2, 0.35, 0.25, 0.20))
final_plot <- cowplot::plot_grid(
top_row,
top_second_legend)
final_plot
final_plot <- cowplot::plot_grid(
top_row,
top_second_legend,
ncol=1,
nrow=2)
final_plot
final_plot <- cowplot::plot_grid(
top_row,
top_second_legend,
ncol=1,
nrow=2,
rel_heights = c(0.25, 0.05))
final_plot
pdf('~/Desktop/clone_ana.pdf', width = 10, height = 5, useDingbats = FALSE)
plot(final_plot)
dev.off()
